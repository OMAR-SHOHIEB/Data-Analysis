# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dasVJayj_gSXF3xFFPr0Y18nsKL276kB

# THE BEST TEAM IN THE WORLD

OMAR SHOHIEB "LEADER"

SEIF NASSER

AMR REFAT

BASEL MOHAMED

ZIAD AHMED

MOUSA

ABDALLA

بسم الله الرحمن الرحيم و به نستعين و الصلاه و السلام علي أشرف المرسلين سيدنا محمد وعلي أله و صحبه

# IMPORT THE LIBERARIES
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt
from sklearn.preprocessing import OneHotEncoder,LabelEncoder, OrdinalEncoder

"""# date insertion"""

df=pd.read_csv('sales_for_course.csv')

df.head()

"""# over veiw"""

df.info()

df.describe()

"""# Pre-processing

detect duplicates
"""

duplicates = df[df.duplicated()]
duplicates

df = df.drop_duplicates()
df.duplicated().sum()

"""detect outliar"""

sns.boxplot(data=df[["Revenue","Customer Age"]])
plt.show()

"""this is not outliar

this is normal increasing in the revenue

treat with null
"""

df.isnull().sum()

df=df.dropna(axis=0)

df.isnull().sum()
df.info()

"""# delete columns aren`t importante"""

df=df.drop(columns=["index","Column1","Year"])

df.head(10)

"""# create columns to date"""

df["Date"] = pd.to_datetime(df["Date"])
df= df.sort_values(by="Date").reset_index(drop=True)

df["year"] = df["Date"].dt.year
df["month"]= df["Date"].dt.month
df["day"]= df["Date"].dt.day
# df['day_of_week'] = df['date'].dt.day_name()

df.head(10)

order=["Date","day","month","Month","year","Customer Age","Customer Gender",	"Country"	,"State"	,"Product Category"	,"Sub Category"	,"Quantity",	"Unit Cost"	,"Unit Price"	,"Cost"	,"Revenue"]
df = df[order]
df.head(10)

"""# show the sales over years"""

month_counts = df['Month'].value_counts()
plt.pie(month_counts, labels=month_counts.index, autopct='%1.1f%%', startangle=90, shadow=True)
plt.title("Distribution of Data by Month")
plt.axis('equal')
plt.show()

"""# over 2015"""

df_2015=df[df["year"]==2015.0][["Date","Revenue","day","year","month","Month"]]
df_2015["Revenue"].sum(axis=0)

plt.figure(figsize=(35,6))
plt.plot(df_2015["Date"],df_2015["Revenue"])
plt.xlabel("Date")
plt.ylabel("Revenue")
plt.title("Revenue Over 2015")

plt.show()

"""# over 2016"""

df_2016=df[df["year"]==2016.0][["Date","Revenue","day","year","month"]]
df_2016["Revenue"].sum(axis=0)

plt.figure(figsize=(35,10))
plt.plot(df_2016["Date"],df_2016["Revenue"])
plt.xlabel("Date")
plt.ylabel("Revenue")
plt.title("Revenue Over 2015")

plt.show()

"""# over month"""

fig, axes=plt.subplots(4 , 3,figsize=((20,10)))
axes=axes.flatten()

for month in range (1,13):
    ax=axes[month-1]
    x_axis=df_2015[df_2015["month"]==month]
    sns.lineplot(data=x_axis,x="day",y="Revenue",ax=ax)
    ax.set_title(f"Revenue in {month}/2015")
    plt.suptitle("Revenue over months in 2015",fontsize=16,fontweight="bold")

plt.tight_layout()
plt.show()

df_2016["month"].unique()

fig, axes=plt.subplots(2,4,figsize=(20,10))
axes=axes.flatten()
for month in range(1,8):
    ax=axes[month-1]
    data=df_2016[df_2016["month"]==month]
    sns.lineplot(data=data,x="day",y="Revenue",ax=ax)
    ax.set_title(f"Revenue in {month}/2016")
    plt.suptitle("Revenue over months in 2016",fontsize=16,fontweight="bold")

plt.tight_layout()
plt.show()

"""# over Age"""

plt.figure(figsize=(35,10))
sns.pairplot(df,vars=["Customer Age"])
plt.show()

df.head()

"""# gender"""

gender_count=df["Customer Gender"].value_counts().reset_index()
gender_count.columns = ["Customer Gender", "count"]

plt.bar(gender_count["Customer Gender"], gender_count["count"])
plt.xlabel('Gender')
plt.ylabel('Count')
plt.title('Gender Count')
plt.show()

"""# gender encoding"""

label=LabelEncoder()
df["Customer Gender"]=label.fit_transform(df["Customer Gender"])
df.head()

"""# feature extraction

# get profit
"""

df["profit"]=df["Revenue"]-df["Cost"]
plt.figure(figsize=(20,5))
sns.lineplot(data=df,x="Date",y="profit")

"""# EDA (Exploration data analysis)

# country

sales with quantity
"""

sum_quantity_per_subcategory = df.groupby("Country")["Quantity"].sum().sort_values(ascending=False)
plt.figure(figsize=(14, 7))
plt.bar(sum_quantity_per_subcategory.index, sum_quantity_per_subcategory.values, color='skyblue')

plt.xlabel("sales quantity in country")
plt.ylabel("Total Quantity")
plt.title("Total Quantity of sales in country")
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""sales with profit"""

sum_profit_per_subcategory = df.groupby("Country")["profit"].sum().sort_values(ascending=False)
plt.figure(figsize=(14, 7))
plt.bar(sum_profit_per_subcategory.index, sum_profit_per_subcategory.values, color='skyblue')
plt.xlabel("sales profit in country")
plt.ylabel("Total profit")
plt.title("Total profit of sales in country")
plt.xticks(rotation=90)
plt.ylim(0,1000000)
plt.tight_layout()
plt.show()

"""# all state in the country

state with quantity of sales
"""

fig,axes=plt.subplots(2,2,figsize=(20,10))
axes=axes.flatten()
country=['United States','United Kingdom', 'Germany','France']
var=0
for cou in country:
    ax=axes[var]
    var=var+1
    quantity_state = df[df["Country"]==cou].groupby("State")["Quantity"].sum().reset_index()
    ax.bar(quantity_state["State"], quantity_state["Quantity"])
    ax.set_xlabel(f"sales in {cou}")
    ax.set_ylabel("Sum of Quantity")
    ax.tick_params(axis='x', rotation=85)
    ax.set_title(f"Sales over {cou}")
    for j, v in enumerate(quantity_state["Quantity"]):
        ax.text(j, v + 0.1, str(int(v)), ha='center', va='bottom', fontsize=7)
plt.tight_layout()
plt.show()

"""with profit"""

fig,axes=plt.subplots(2,2,figsize=(20,7))
axes=axes.flatten()
country=['United States','United Kingdom', 'Germany','France']
var=0
for cou in country:
    ax=axes[var]
    var=var+1
    quantity_state = df[df["Country"]==cou].groupby("State")["profit"].sum().reset_index()
    ax.bar(quantity_state["State"], quantity_state["profit"])
    ax.set_xlabel(f"sales in {cou}")
    ax.set_ylabel("Sum of profit")
    ax.tick_params(axis='x', rotation=85)
    ax.set_title(f"Sales over {cou}")
    for j, v in enumerate(quantity_state["profit"]):
        ax.text(j, v + 0.1, str(int(v)), ha='center', va='bottom', fontsize=7)
plt.tight_layout()
plt.show()

"""# main product

Quantity over main product
"""

sum_quantity_per_subcategory = df.groupby("Product Category")["Quantity"].sum().sort_values(ascending=False)
plt.figure(figsize=(14, 7))
plt.bar(sum_quantity_per_subcategory.index, sum_quantity_per_subcategory.values, color='skyblue')

plt.xlabel("Product Category")
plt.ylabel("Total Quantity")
plt.title("Total Quantity by Product Category")
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""the profit over product"""

Accessories=df[df["Product Category"]=="Accessories"]["profit"].sum()
Bikes=df[df["Product Category"]=="Bikes"]["profit"].sum()
Clothing=df[df["Product Category"]=="Clothing"]["profit"].sum()
categories = ["Accessories", "Bikes", "Clothing"]
profits = [Accessories, Bikes, Clothing]
plt.pie(profits, labels=categories, autopct='%1.1f%%', startangle=140)
plt.show()

"""show with value"""

def show_values(pct, all_vals):
    absolute = int(pct/100.*sum(all_vals))
    return f"{absolute}"
plt.pie(
    profits,
    labels=categories,
    autopct=lambda pct: show_values(pct, profits),
    startangle=140
)
plt.title("Total Profit by Product Category")
plt.axis('equal')
plt.show()

"""as you show the accessories is the best State with the big profit

# go over main product with (sub category)
"""

df.head()

df["Sub Category"].unique()

profit=df.groupby(["Product Category","Sub Category"])["profit"].sum().reset_index()
fig,axes=plt.subplots(1,3,figsize=(10,5))
axes=axes.flatten()
products=['Bikes', 'Accessories', 'Clothing']
var=0
for product in products:
    ax=axes[var]
    var=var+1
    profit_product=profit[profit["Product Category"]==product][["profit","Sub Category"]]
    ax.bar(profit_product["Sub Category"], profit_product["profit"])
    ax.set_xlabel(f"Sub product in {product}")
    ax.set_ylabel("Sum of profit")
    ax.set_xticks(profit_product["Sub Category"])
    ax.set_xticklabels(profit_product["Sub Category"], rotation=85)
    ax.set_title(f"Sales over {product}")
    for j,v in enumerate(profit_product["profit"]):
        ax.text(j,v+1,str(int(v)),ha="center",va="bottom",fontsize=6)
plt.tight_layout()
plt.show()

total_profit_by_subcategory = df.groupby("Sub Category")["profit"].sum().reset_index()
total_profit_by_subcategory=total_profit_by_subcategory.sort_values(by="profit",ascending=False)
plt.bar(total_profit_by_subcategory["Sub Category"],total_profit_by_subcategory["profit"])
plt.xticks(rotation=85)
plt.show()

"""Quantity over sub product"""

profit=df.groupby(["Product Category","Sub Category"])["Quantity"].sum().reset_index()
fig,axes=plt.subplots(1,3,figsize=(10,5))
axes=axes.flatten()
products=['Bikes', 'Accessories', 'Clothing']
var=0
for product in products:
    ax=axes[var]
    var=var+1
    profit_product=profit[profit["Product Category"]==product][["Quantity","Sub Category"]]
    ax.bar(profit_product["Sub Category"], profit_product["Quantity"])
    ax.set_xlabel(f"Sub product in {product}")
    ax.set_ylabel("Sum of Quantity")
    ax.set_xticks(profit_product["Sub Category"])
    ax.set_xticklabels(profit_product["Sub Category"], rotation=85)
    ax.set_title(f"Sales over {product}")
    for j,v in enumerate(profit_product["Quantity"]):
        ax.text(j,v+1,str(int(v)),ha="center",va="bottom",fontsize=6)
plt.tight_layout()
plt.show()

sum_quantity_per_subcategory = df.groupby("Sub Category")["Quantity"].sum().sort_values(ascending=False)
plt.figure(figsize=(14, 7))
plt.bar(sum_quantity_per_subcategory.index, sum_quantity_per_subcategory.values, color='skyblue')

plt.xlabel("Sub Category")
plt.ylabel("Total Quantity")
plt.title("Total Quantity by Sub Category")
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""# country with product

main
"""

df.head()

countrcountry_main_product = df[["Country", "Product Category"]].value_counts().reset_index(name="count")
countrcountry_main_product

sns.barplot(
    data=countrcountry_main_product,
    x='Country',
    y='count',
    hue='Product Category'
)
plt.title('Top Products per Country')
plt.ylabel('Number of Purchases')
plt.xlabel('Country')
plt.xticks(rotation=45)
plt.show()

"""sub"""

df.head()

countrcountry_main_product = df[["Country","Sub Category"]].value_counts().reset_index(name="count")
countrcountry_main_product

sns.barplot(
    data=countrcountry_main_product,
    x='Country',
    y='count',
    hue='Sub Category'
)
plt.title('Top Products per Country')
plt.ylabel('Number of Purchases')
plt.xlabel('Country')
plt.xticks(rotation=45)
plt.show()

"""# State and product"""

df.head()

countrcountry_sub_product = df[["State", "Product Category"]].value_counts().reset_index(name="count")
countrcountry_sub_product

plt.figure(figsize=(10,10))
sns.barplot(
    data=countrcountry_sub_product,
    x='State',
    y='count',
    hue='Product Category'
)
plt.title('Top Products per Country')
plt.ylabel('Number of Purchases')
plt.xlabel('Country')
plt.xticks(rotation=90)
plt.show()

"""# After all
you should know that "I love my team"

BY:"OMAR SHOHIEB"
"""